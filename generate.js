const fs = require('fs');
const path = require('path');
const recursive = require('recursive-readdir');
const babel = require('@babel/core');

const { dirname, relative, join, resolve } = path;

const { ASYNC } = process.env

const srcDir = './src';

function processPath(baseFilename) {
  const { dir, base: basename } = path.parse(baseFilename);
  const templateFilename = join(srcDir, dir, `${basename}.template.js`);

  const impl = babel.transformFileSync(templateFilename, {
    babelrc: false,
    configFile: false,
    plugins: [
      './babel-plugin-resolve-a-import-paths',
      'macros',
      // use dead code elimination to clean up if(false) {} and if(true) {}
      ['minify-dead-code-elimination', { keepFnName: true, keepFnArgs: true, keepClassName: true }],
    ],
  }).code;

  const destFilename = join(srcDir, dir, ASYNC ? `async-${basename}.mjs` : `${basename}.mjs`);

const content = 
`/**
 * This file is autogenerated from a template. Please do not edit it directly.
 * Please edit ./${relative(dirname(destFilename), templateFilename)}
 * then rebuild with:
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

${impl}`;

  fs.writeFileSync(destFilename, content, 'utf8');
}

recursive(resolve(__dirname, srcDir)).then(paths => {
  for (const path of paths) {
    const [match, basename] = /(.*)\.template\.js/.exec(path) || [];
    if (match) {
      processPath(relative(join(__dirname, srcDir), basename));
    }
  }
}).catch(console.error);
